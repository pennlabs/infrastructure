// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`default 1`] = `
"# Generated by cdkactions. Do not modify
# Generated as part of the 'application' stack.
name: Build and Deploy
on: push
jobs:
  django-check:
    name: Django Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache
        uses: actions/cache@v2
        with:
          path: ~/.local/share/virtualenvs
          key: v0-\${{ hashFiles('backend/Pipfile.lock') }}
      - name: Install Dependencies
        run: |-
          cd backend
          pip install pipenv
          pipenv install --deploy --dev
      - name: Lint (flake8)
        run: |-
          cd backend
          pipenv run flake8 .
      - name: Lint (black)
        run: |-
          cd backend
          pipenv run black --check .
      - name: Test
        run: |-
          cd backend
          pipenv run coverage run manage.py test --settings=example.settings.ci --parallel
      - name: Upload Code Coverage
        run: |-
          ROOT=$(pwd)
          cd backend
          pipenv run codecov --root ROOT --flags backend
    container:
      image: python:3.8
    env:
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/postgres
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
        options: \\"--health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\\"
  publish-backend:
    name: Publish backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Publish
        uses: docker/build-push-action@v1
        with:
          repository: pennlabs/example-backend
          path: backend
          dockerfile: backend/Dockerfile
          username: \${{ secrets.DOCKER_USERNAME }}
          password: \${{ secrets.DOCKER_PASSWORD }}
          push: \${{ github.ref == 'refs/heads/master' }}
          tags: latest,\${{ github.sha }}
          cache_froms: pennlabs/example-backend:latest
    needs: django-check
  react-check:
    name: React Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache
        uses: actions/cache@v2
        with:
          path: \\"**/node_modules\\"
          key: v0-\${{ hashFiles('frontend/yarn.lock') }}
      - name: Install Dependencies
        run: |-
          cd frontend
          yarn install --frozen-lockfile
      - name: Test
        run: |-
          cd frontend
          yarn test
      - name: Upload Code Coverage
        run: |-
          ROOT=$(pwd)
          cd frontend
          yarn run codecov -p $ROOT -F frontend
    container:
      image: node:14
  publish-frontend:
    name: Publish frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Publish
        uses: docker/build-push-action@v1
        with:
          repository: pennlabs/example-frontend
          path: frontend
          dockerfile: frontend/Dockerfile
          username: \${{ secrets.DOCKER_USERNAME }}
          password: \${{ secrets.DOCKER_PASSWORD }}
          push: \${{ github.ref == 'refs/heads/master' }}
          tags: latest,\${{ github.sha }}
          cache_froms: pennlabs/example-frontend:latest
    needs: react-check
  deploy:
    runs-on: ubuntu-latest
    container:
      image: pennlabs/helm-tools:c964e53d3e3e88d36677e84f5437da40a289c7a4
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v2
      - name: Deploy
        run: |-
          curl -s -X GET -H \\"Content-Type: application/json\\" -H \\"Authorization: Bearer $DO_AUTH_TOKEN\\" \\"https://api.digitalocean.com/v2/kubernetes/clusters/\${K8S_CLUSTER_ID}/kubeconfig\\" > /kubeconfig.conf

          export KUBECONFIG=/kubeconfig.conf

          # this specifies what tag of icarus to pull down
          DEPLOY_TAG=$(yq r k8s/values.yaml deploy_version)
          if [ \\"$DEPLOY_TAG\\" == \\"null\\" ]; then
              echo \\"Could not find deploy tag\\"
              exit 1
          fi

          helm repo add pennlabs https://helm.pennlabs.org/

          for i in {1..10}; do
            helm upgrade --install --atomic --set=image_tag=$IMAGE_TAG -f k8s/values.yaml --version \\"\${DEPLOY_TAG}\\" $RELEASE_NAME pennlabs/icarus && exit 0
            sleep 10s
            echo \\"Retrying deploy for $i times\\"
          done
        env:
          IMAGE_TAG: \${{ github.sha }}
          DO_AUTH_TOKEN: \${{ secrets.DO_AUTH_TOKEN }}
          K8S_CLUSTER_ID: \${{ secrets.K8S_CLUSTER_ID }}
    needs:
      - publish-backend
      - publish-frontend
"
`;

exports[`integration tests 1`] = `
"# Generated by cdkactions. Do not modify
# Generated as part of the 'application' stack.
name: Build and Deploy
on: push
jobs:
  django-check:
    name: Django Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache
        uses: actions/cache@v2
        with:
          path: ~/.local/share/virtualenvs
          key: v0-\${{ hashFiles('backend/Pipfile.lock') }}
      - name: Install Dependencies
        run: |-
          cd backend
          pip install pipenv
          pipenv install --deploy --dev
      - name: Lint (flake8)
        run: |-
          cd backend
          pipenv run flake8 .
      - name: Lint (black)
        run: |-
          cd backend
          pipenv run black --check .
      - name: Test
        run: |-
          cd backend
          pipenv run coverage run manage.py test --settings=example.settings.ci --parallel
      - name: Upload Code Coverage
        run: |-
          ROOT=$(pwd)
          cd backend
          pipenv run codecov --root ROOT --flags backend
    container:
      image: python:3.8
    env:
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/postgres
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
        options: \\"--health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\\"
  publish-backend:
    name: Publish backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Publish
        uses: docker/build-push-action@v1
        with:
          repository: pennlabs/example-backend
          path: backend
          dockerfile: backend/Dockerfile
          username: \${{ secrets.DOCKER_USERNAME }}
          password: \${{ secrets.DOCKER_PASSWORD }}
          push: \${{ github.ref == 'refs/heads/master' }}
          tags: latest,\${{ github.sha }}
          cache_froms: pennlabs/example-backend:latest
    needs: django-check
  react-check:
    name: React Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache
        uses: actions/cache@v2
        with:
          path: \\"**/node_modules\\"
          key: v0-\${{ hashFiles('frontend/yarn.lock') }}
      - name: Install Dependencies
        run: |-
          cd frontend
          yarn install --frozen-lockfile
      - name: Test
        run: |-
          cd frontend
          yarn test
      - name: Upload Code Coverage
        run: |-
          ROOT=$(pwd)
          cd frontend
          yarn run codecov -p $ROOT -F frontend
    container:
      image: node:14
  publish-frontend:
    name: Publish frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Publish
        uses: docker/build-push-action@v1
        with:
          repository: pennlabs/example-frontend
          path: frontend
          dockerfile: frontend/Dockerfile
          username: \${{ secrets.DOCKER_USERNAME }}
          password: \${{ secrets.DOCKER_PASSWORD }}
          push: \${{ github.ref == 'refs/heads/master' }}
          tags: latest,\${{ github.sha }}
          cache_froms: pennlabs/example-frontend:latest
    needs: react-check
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Run docker compose
        run: docker-compose up -d -f docker-compose.test.yaml
      - name: Populate backend
        run: docker run backend python manage.py populate
      - name: Run integration tests
        run: docker run frontend yarn integration
    env:
      GIT_SHA: \${{ github.sha }}
    needs:
      - publish-backend
      - publish-frontend
  deploy:
    runs-on: ubuntu-latest
    container:
      image: pennlabs/helm-tools:c964e53d3e3e88d36677e84f5437da40a289c7a4
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v2
      - name: Deploy
        run: |-
          curl -s -X GET -H \\"Content-Type: application/json\\" -H \\"Authorization: Bearer $DO_AUTH_TOKEN\\" \\"https://api.digitalocean.com/v2/kubernetes/clusters/\${K8S_CLUSTER_ID}/kubeconfig\\" > /kubeconfig.conf

          export KUBECONFIG=/kubeconfig.conf

          # this specifies what tag of icarus to pull down
          DEPLOY_TAG=$(yq r k8s/values.yaml deploy_version)
          if [ \\"$DEPLOY_TAG\\" == \\"null\\" ]; then
              echo \\"Could not find deploy tag\\"
              exit 1
          fi

          helm repo add pennlabs https://helm.pennlabs.org/

          for i in {1..10}; do
            helm upgrade --install --atomic --set=image_tag=$IMAGE_TAG -f k8s/values.yaml --version \\"\${DEPLOY_TAG}\\" $RELEASE_NAME pennlabs/icarus && exit 0
            sleep 10s
            echo \\"Retrying deploy for $i times\\"
          done
        env:
          IMAGE_TAG: \${{ github.sha }}
          DO_AUTH_TOKEN: \${{ secrets.DO_AUTH_TOKEN }}
          K8S_CLUSTER_ID: \${{ secrets.K8S_CLUSTER_ID }}
    needs:
      - integration-tests
"
`;
