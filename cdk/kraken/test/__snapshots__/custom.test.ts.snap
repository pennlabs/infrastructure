// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`workflow with 2 django+react projects 1`] = `
Object {
  "jobs": Object {
    "deploy": Object {
      "container": Object {
        "image": "pennlabs/helm-tools:c964e53d3e3e88d36677e84f5437da40a289c7a4",
      },
      "if": "github.ref == 'refs/heads/master'",
      "needs": Array [
        "publish-backend-one",
        "publish-backend-two",
        "publish-frontend-one",
        "publish-frontend-two",
      ],
      "runs-on": "ubuntu-latest",
      "steps": Array [
        Object {
          "uses": "actions/checkout@v2",
        },
        Object {
          "env": Object {
            "DO_AUTH_TOKEN": "\${{ secrets.DO_AUTH_TOKEN }}",
            "IMAGE_TAG": "\${{ github.sha }}",
            "K8S_CLUSTER_ID": "\${{ secrets.K8S_CLUSTER_ID }}",
          },
          "name": "Deploy",
          "run": "curl -s -X GET -H \\"Content-Type: application/json\\" -H \\"Authorization: Bearer $DO_AUTH_TOKEN\\" \\"https://api.digitalocean.com/v2/kubernetes/clusters/\${K8S_CLUSTER_ID}/kubeconfig\\" > /kubeconfig.conf

export KUBECONFIG=/kubeconfig.conf

# this specifies what tag of icarus to pull down
DEPLOY_TAG=$(yq r k8s/values.yaml deploy_version)
if [ \\"$DEPLOY_TAG\\" == \\"null\\" ]; then
    echo \\"Could not find deploy tag\\"
    exit 1
fi

helm repo add pennlabs https://helm.pennlabs.org/

for i in {1..10}; do
  helm upgrade --install --atomic --set=image_tag=$IMAGE_TAG -f k8s/values.yaml --version \\"\${DEPLOY_TAG}\\" $RELEASE_NAME pennlabs/icarus && exit 0
  sleep 10s
  echo \\"Retrying deploy for $i times\\"
done",
        },
      ],
    },
    "django-check-one": Object {
      "container": Object {
        "image": "python:3.8",
      },
      "env": Object {
        "DATABASE_URL": "postgres://postgres:postgres@postgres:5432/postgres",
      },
      "name": "Django Check one",
      "runs-on": "ubuntu-latest",
      "services": Object {
        "postgres": Object {
          "env": Object {
            "POSTGRES_DB": "postgres",
            "POSTGRES_PASSWORD": "postgres",
            "POSTGRES_USER": "postgres",
          },
          "image": "postgres:12",
          "options": "--health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5",
        },
      },
      "steps": Array [
        Object {
          "uses": "actions/checkout@v2",
        },
        Object {
          "name": "Cache",
          "uses": "actions/cache@v2",
          "with": Object {
            "key": "v0-\${{ hashFiles('backendOne/Pipfile.lock') }}",
            "path": "~/.local/share/virtualenvs",
          },
        },
        Object {
          "name": "Install Dependencies",
          "run": "cd backendOne
pip install pipenv
pipenv install --deploy --dev",
        },
        Object {
          "name": "Lint (flake8)",
          "run": "cd backendOne
pipenv run flake8 .",
        },
        Object {
          "name": "Lint (black)",
          "run": "cd backendOne
pipenv run black --check .",
        },
        Object {
          "name": "Test",
          "run": "cd backendOne
pipenv run coverage run --concurrency=multiprocessing manage.py test --settings=projectOne.settings.ci --parallel
pipenv run coverage combine",
        },
        Object {
          "name": "Upload Code Coverage",
          "run": "ROOT=$(pwd)
cd backendOne
pipenv run codecov --root $ROOT --flags backend",
        },
      ],
    },
    "django-check-two": Object {
      "container": Object {
        "image": "python:3.8",
      },
      "env": Object {
        "DATABASE_URL": "postgres://postgres:postgres@postgres:5432/postgres",
      },
      "name": "Django Check two",
      "runs-on": "ubuntu-latest",
      "services": Object {
        "postgres": Object {
          "env": Object {
            "POSTGRES_DB": "postgres",
            "POSTGRES_PASSWORD": "postgres",
            "POSTGRES_USER": "postgres",
          },
          "image": "postgres:12",
          "options": "--health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5",
        },
      },
      "steps": Array [
        Object {
          "uses": "actions/checkout@v2",
        },
        Object {
          "name": "Cache",
          "uses": "actions/cache@v2",
          "with": Object {
            "key": "v0-\${{ hashFiles('backendTwo/Pipfile.lock') }}",
            "path": "~/.local/share/virtualenvs",
          },
        },
        Object {
          "name": "Install Dependencies",
          "run": "cd backendTwo
pip install pipenv
pipenv install --deploy --dev",
        },
        Object {
          "name": "Lint (flake8)",
          "run": "cd backendTwo
pipenv run flake8 .",
        },
        Object {
          "name": "Lint (black)",
          "run": "cd backendTwo
pipenv run black --check .",
        },
        Object {
          "name": "Test",
          "run": "cd backendTwo
pipenv run coverage run --concurrency=multiprocessing manage.py test --settings=projectTwo.settings.ci --parallel
pipenv run coverage combine",
        },
        Object {
          "name": "Upload Code Coverage",
          "run": "ROOT=$(pwd)
cd backendTwo
pipenv run codecov --root $ROOT --flags backend",
        },
      ],
    },
    "publish-backend-one": Object {
      "name": "Publish backend-one",
      "needs": "django-check-one",
      "runs-on": "ubuntu-latest",
      "steps": Array [
        Object {
          "uses": "actions/checkout@v2",
        },
        Object {
          "name": "Publish",
          "uses": "docker/build-push-action@v1",
          "with": Object {
            "cache_froms": "pennlabs/imageOne-backend:latest",
            "dockerfile": "backendOne/Dockerfile",
            "password": "\${{ secrets.DOCKER_PASSWORD }}",
            "path": "backendOne",
            "push": "\${{ github.ref == 'refs/heads/master' }}",
            "repository": "pennlabs/imageOne-backend",
            "tags": "latest,\${{ github.sha }}",
            "username": "\${{ secrets.DOCKER_USERNAME }}",
          },
        },
      ],
    },
    "publish-backend-two": Object {
      "name": "Publish backend-two",
      "needs": "django-check-two",
      "runs-on": "ubuntu-latest",
      "steps": Array [
        Object {
          "uses": "actions/checkout@v2",
        },
        Object {
          "name": "Publish",
          "uses": "docker/build-push-action@v1",
          "with": Object {
            "cache_froms": "pennlabs/imageTwo-backend:latest",
            "dockerfile": "backendTwo/Dockerfile",
            "password": "\${{ secrets.DOCKER_PASSWORD }}",
            "path": "backendTwo",
            "push": "\${{ github.ref == 'refs/heads/master' }}",
            "repository": "pennlabs/imageTwo-backend",
            "tags": "latest,\${{ github.sha }}",
            "username": "\${{ secrets.DOCKER_USERNAME }}",
          },
        },
      ],
    },
    "publish-frontend-one": Object {
      "name": "Publish frontend-one",
      "needs": "react-check-one",
      "runs-on": "ubuntu-latest",
      "steps": Array [
        Object {
          "uses": "actions/checkout@v2",
        },
        Object {
          "name": "Publish",
          "uses": "docker/build-push-action@v1",
          "with": Object {
            "cache_froms": "pennlabs/imageOne-frontend:latest",
            "dockerfile": "frontendOne/Dockerfile",
            "password": "\${{ secrets.DOCKER_PASSWORD }}",
            "path": "frontendOne",
            "push": "\${{ github.ref == 'refs/heads/master' }}",
            "repository": "pennlabs/imageOne-frontend",
            "tags": "latest,\${{ github.sha }}",
            "username": "\${{ secrets.DOCKER_USERNAME }}",
          },
        },
      ],
    },
    "publish-frontend-two": Object {
      "name": "Publish frontend-two",
      "needs": "react-check-two",
      "runs-on": "ubuntu-latest",
      "steps": Array [
        Object {
          "uses": "actions/checkout@v2",
        },
        Object {
          "name": "Publish",
          "uses": "docker/build-push-action@v1",
          "with": Object {
            "cache_froms": "pennlabs/imageTwo-frontend:latest",
            "dockerfile": "frontendTwo/Dockerfile",
            "password": "\${{ secrets.DOCKER_PASSWORD }}",
            "path": "frontendTwo",
            "push": "\${{ github.ref == 'refs/heads/master' }}",
            "repository": "pennlabs/imageTwo-frontend",
            "tags": "latest,\${{ github.sha }}",
            "username": "\${{ secrets.DOCKER_USERNAME }}",
          },
        },
      ],
    },
    "react-check-one": Object {
      "container": Object {
        "image": "node:14",
      },
      "name": "React Check one",
      "runs-on": "ubuntu-latest",
      "steps": Array [
        Object {
          "uses": "actions/checkout@v2",
        },
        Object {
          "name": "Cache",
          "uses": "actions/cache@v2",
          "with": Object {
            "key": "v0-\${{ hashFiles('frontendOne/yarn.lock') }}",
            "path": "**/node_modules",
          },
        },
        Object {
          "name": "Install Dependencies",
          "run": "cd frontendOne
yarn install --frozen-lockfile",
        },
        Object {
          "name": "Test",
          "run": "cd frontendOne
yarn test",
        },
        Object {
          "name": "Upload Code Coverage",
          "run": "ROOT=$(pwd)
cd frontendOne
yarn run codecov -p $ROOT -F frontend",
        },
      ],
    },
    "react-check-two": Object {
      "container": Object {
        "image": "node:14",
      },
      "name": "React Check two",
      "runs-on": "ubuntu-latest",
      "steps": Array [
        Object {
          "uses": "actions/checkout@v2",
        },
        Object {
          "name": "Cache",
          "uses": "actions/cache@v2",
          "with": Object {
            "key": "v0-\${{ hashFiles('frontendTwo/yarn.lock') }}",
            "path": "**/node_modules",
          },
        },
        Object {
          "name": "Install Dependencies",
          "run": "cd frontendTwo
yarn install --frozen-lockfile",
        },
        Object {
          "name": "Test",
          "run": "cd frontendTwo
yarn test",
        },
        Object {
          "name": "Upload Code Coverage",
          "run": "ROOT=$(pwd)
cd frontendTwo
yarn run codecov -p $ROOT -F frontend",
        },
      ],
    },
  },
  "name": "Workflow",
  "on": "push",
}
`;
