// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`default 1`] = `
Object {
  "container": Object {
    "image": "python:3.10-bookworm",
  },
  "env": Object {
    "DATABASE_URL": "postgres://postgres:postgres@postgres:5432/postgres",
  },
  "name": "Django Check",
  "runs-on": "ubuntu-latest",
  "services": Object {
    "postgres": Object {
      "env": Object {
        "POSTGRES_DB": "postgres",
        "POSTGRES_PASSWORD": "postgres",
        "POSTGRES_USER": "postgres",
      },
      "image": "postgres:12",
      "options": "--health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5",
    },
  },
  "steps": Array [
    Object {
      "uses": "actions/checkout@v2",
    },
    Object {
      "name": "Cache",
      "uses": "actions/cache@v4",
      "with": Object {
        "key": "v0-\${{ hashFiles('./Pipfile.lock') }}",
        "path": "~/.local/share/virtualenvs",
      },
    },
    Object {
      "name": "Install Dependencies",
      "run": "cd .
pip install pipenv
pipenv install --deploy --dev",
    },
    Object {
      "name": "Lint (flake8)",
      "run": "cd .
pipenv run flake8 .",
    },
    Object {
      "name": "Lint (black)",
      "run": "cd .
pipenv run black --check .",
    },
    Object {
      "name": "Test (run in parallel)",
      "run": "cd .
pipenv run coverage run --concurrency=multiprocessing manage.py test --settings=example.settings.ci --parallel
pipenv run coverage combine
pipenv run coverage xml",
    },
    Object {
      "name": "Upload Code Coverage",
      "uses": "codecov/codecov-action@v3",
      "with": Object {
        "directory": "./backend/",
        "fail_ci_if_error": true,
        "files": "coverage.xml",
        "name": "codecov-umbrella",
        "token": "\${{ secrets.CODECOV_TOKEN }}",
        "verbose": true,
      },
    },
  ],
}
`;

exports[`different directory 1`] = `
Object {
  "container": Object {
    "image": "python:3.10-bookworm",
  },
  "env": Object {
    "DATABASE_URL": "postgres://postgres:postgres@postgres:5432/postgres",
  },
  "name": "Django Check",
  "runs-on": "ubuntu-latest",
  "services": Object {
    "postgres": Object {
      "env": Object {
        "POSTGRES_DB": "postgres",
        "POSTGRES_PASSWORD": "postgres",
        "POSTGRES_USER": "postgres",
      },
      "image": "postgres:12",
      "options": "--health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5",
    },
  },
  "steps": Array [
    Object {
      "uses": "actions/checkout@v2",
    },
    Object {
      "name": "Cache",
      "uses": "actions/cache@v4",
      "with": Object {
        "key": "v0-\${{ hashFiles('backend/Pipfile.lock') }}",
        "path": "~/.local/share/virtualenvs",
      },
    },
    Object {
      "name": "Install Dependencies",
      "run": "cd backend
pip install pipenv
pipenv install --deploy --dev",
    },
    Object {
      "name": "Lint (flake8)",
      "run": "cd backend
pipenv run flake8 .",
    },
    Object {
      "name": "Lint (black)",
      "run": "cd backend
pipenv run black --check .",
    },
    Object {
      "name": "Test (run in parallel)",
      "run": "cd backend
pipenv run coverage run --concurrency=multiprocessing manage.py test --settings=example.settings.ci --parallel
pipenv run coverage combine
pipenv run coverage xml",
    },
    Object {
      "name": "Upload Code Coverage",
      "uses": "codecov/codecov-action@v3",
      "with": Object {
        "directory": "./backend/",
        "fail_ci_if_error": true,
        "files": "coverage.xml",
        "name": "codecov-umbrella",
        "token": "\${{ secrets.CODECOV_TOKEN }}",
        "verbose": true,
      },
    },
  ],
}
`;

exports[`different python version 1`] = `
Object {
  "container": Object {
    "image": "python:2.7",
  },
  "env": Object {
    "DATABASE_URL": "postgres://postgres:postgres@postgres:5432/postgres",
  },
  "name": "Django Check",
  "runs-on": "ubuntu-latest",
  "services": Object {
    "postgres": Object {
      "env": Object {
        "POSTGRES_DB": "postgres",
        "POSTGRES_PASSWORD": "postgres",
        "POSTGRES_USER": "postgres",
      },
      "image": "postgres:12",
      "options": "--health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5",
    },
  },
  "steps": Array [
    Object {
      "uses": "actions/checkout@v2",
    },
    Object {
      "name": "Cache",
      "uses": "actions/cache@v4",
      "with": Object {
        "key": "v0-\${{ hashFiles('./Pipfile.lock') }}",
        "path": "~/.local/share/virtualenvs",
      },
    },
    Object {
      "name": "Install Dependencies",
      "run": "cd .
pip install pipenv
pipenv install --deploy --dev",
    },
    Object {
      "name": "Lint (flake8)",
      "run": "cd .
pipenv run flake8 .",
    },
    Object {
      "name": "Lint (black)",
      "run": "cd .
pipenv run black --check .",
    },
    Object {
      "name": "Test (run in parallel)",
      "run": "cd .
pipenv run coverage run --concurrency=multiprocessing manage.py test --settings=example.settings.ci --parallel
pipenv run coverage combine
pipenv run coverage xml",
    },
    Object {
      "name": "Upload Code Coverage",
      "uses": "codecov/codecov-action@v3",
      "with": Object {
        "directory": "./backend/",
        "fail_ci_if_error": true,
        "files": "coverage.xml",
        "name": "codecov-umbrella",
        "token": "\${{ secrets.CODECOV_TOKEN }}",
        "verbose": true,
      },
    },
  ],
}
`;

exports[`no lint 1`] = `
Object {
  "container": Object {
    "image": "python:3.10-bookworm",
  },
  "env": Object {
    "DATABASE_URL": "postgres://postgres:postgres@postgres:5432/postgres",
  },
  "name": "Django Check",
  "runs-on": "ubuntu-latest",
  "services": Object {
    "postgres": Object {
      "env": Object {
        "POSTGRES_DB": "postgres",
        "POSTGRES_PASSWORD": "postgres",
        "POSTGRES_USER": "postgres",
      },
      "image": "postgres:12",
      "options": "--health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5",
    },
  },
  "steps": Array [
    Object {
      "uses": "actions/checkout@v2",
    },
    Object {
      "name": "Cache",
      "uses": "actions/cache@v4",
      "with": Object {
        "key": "v0-\${{ hashFiles('./Pipfile.lock') }}",
        "path": "~/.local/share/virtualenvs",
      },
    },
    Object {
      "name": "Install Dependencies",
      "run": "cd .
pip install pipenv
pipenv install --deploy --dev",
    },
    Object {
      "name": "Test (run in parallel)",
      "run": "cd .
pipenv run coverage run --concurrency=multiprocessing manage.py test --settings=example.settings.ci --parallel
pipenv run coverage combine
pipenv run coverage xml",
    },
    Object {
      "name": "Upload Code Coverage",
      "uses": "codecov/codecov-action@v3",
      "with": Object {
        "directory": "./backend/",
        "fail_ci_if_error": true,
        "files": "coverage.xml",
        "name": "codecov-umbrella",
        "token": "\${{ secrets.CODECOV_TOKEN }}",
        "verbose": true,
      },
    },
  ],
}
`;

exports[`with overrides 1`] = `
Object {
  "container": Object {
    "image": "python:3.10-bookworm",
  },
  "continue-on-error": true,
  "env": Object {
    "DATABASE_URL": "postgres://postgres:postgres@postgres:5432/postgres",
  },
  "name": "Django Check",
  "runs-on": "ubuntu-latest",
  "services": Object {
    "postgres": Object {
      "env": Object {
        "POSTGRES_DB": "postgres",
        "POSTGRES_PASSWORD": "postgres",
        "POSTGRES_USER": "postgres",
      },
      "image": "postgres:12",
      "options": "--health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5",
    },
  },
  "steps": Array [
    Object {
      "uses": "actions/checkout@v2",
    },
    Object {
      "name": "Cache",
      "uses": "actions/cache@v4",
      "with": Object {
        "key": "v0-\${{ hashFiles('./Pipfile.lock') }}",
        "path": "~/.local/share/virtualenvs",
      },
    },
    Object {
      "name": "Install Dependencies",
      "run": "cd .
pip install pipenv
pipenv install --deploy --dev",
    },
    Object {
      "name": "Lint (flake8)",
      "run": "cd .
pipenv run flake8 .",
    },
    Object {
      "name": "Lint (black)",
      "run": "cd .
pipenv run black --check .",
    },
    Object {
      "name": "Test (run in parallel)",
      "run": "cd .
pipenv run coverage run --concurrency=multiprocessing manage.py test --settings=example.settings.ci --parallel
pipenv run coverage combine
pipenv run coverage xml",
    },
    Object {
      "name": "Upload Code Coverage",
      "uses": "codecov/codecov-action@v3",
      "with": Object {
        "directory": "./backend/",
        "fail_ci_if_error": true,
        "files": "coverage.xml",
        "name": "codecov-umbrella",
        "token": "\${{ secrets.CODECOV_TOKEN }}",
        "verbose": true,
      },
    },
  ],
}
`;
